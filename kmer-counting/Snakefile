configfile: "config_offspring.json"

path = "/gpfs/project/projects/medbioinf/data/potato_data/fastq/merged_fastq/"
k_val = [71]

rule all:
	input:
		countfiles = expand("wholegenome_altus_k{k}_unique_counting/count_files/allnodes_{sample}_shortreadcounts_k{k}.txt", sample=config['data']['samples'], k=k_val),
		merged = expand("allnodes_merged_shortreadcounts_k{k}_filtered_0.1.tsv", k= k_val)


#rule unzip:
#	input:
#		path+"{sample}_merged.fastq.gz"
#	output:
#		path+"{sample}_merged.fastq"
#	shell:
#		"gunzip {input}"
		
rule polyassembly:
	input:
		path+"{sample}_merged.fastq"
	output:
		"wholegenome_altus_k{k}_unique_counting/count_files/allnodes_{sample}_shortreadcounts_k{k}.txt"
	threads: 24
	params:
		intermed = path+"{sample}_merged.fastq"
	log:
		"wholegenome_altus_k{k}_unique_counting/logs/allnodes_{sample}_shortreadcounts_k{k}.log"
	shell:	
		"/usr/bin/time -v /gpfs/project/serramar/cproject/build/src/polyassembly_findkmers count_kmers -r /gpfs/project/serramar/potato-hifi/altusHifi/altusGFA_270121/spud_altus_hifiasm.r_utg.nodes.fasta -s {params.intermed} -k allnodes_k{k}_unique_kmers.txt-l {k} -c {output} |& tee {log}"
			
rule merge_countfiles:
	output:
		"allnodes_merged_shortreadcounts_k{k}.tsv"
	shell:
		"/usr/bin/time -v python3 merge_countfiles_allnodes.py {output} config['data']['samples']"
		
rule find_and_replace:
	input:
		"allnodes_merged_shortreadcounts_k{k}.tsv"
	params:
		cutoff = 0.1
	output:
		"allnodes_merged_shortreadcounts_k{k}_filtered_0.1.tsv"
shell:
	"/usr/bin/time -v python3 filter_and_replace.py {input} {output} {params.cutoff}"	
	
	
	