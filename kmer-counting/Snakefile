configfile: "config_offspring.json"
configfile: "config.yaml"

samplepath = config['samplepath']
codepath = config['codepath']
outpath = config['outpath']
altuspath = config['altuspath']
colombapath = config['colombapath']
k_val = config['kmers']

rule all:
	input:
		expand(outpath+"allnodes_merged_shortreadcounts_filtered_k{k}_0.1.tsv", k=k_val)

rule find_kmers:
	output:
		outpath+"allnodes_k{k}_unique_kmers.txt"
	log:
		outpath+"allnodes_k{k}_unique_kmers.log"
	shell:
		"/usr/bin/time -v {config[codepath]}build/src/polyassembly_findkmers find_kmers -r {config[altuspath]} -s {config[colombapath]} -k {output} -l {wildcards.k} |& tee {log}"
		
rule count_kmers:
	input:
		rules.find_kmers.output	
	output:
		outpath+"wholegenome_altus_k{k}_unique_counting/count_files/allnodes_{sample}_shortreadcounts_k{k}.txt"
	threads: 24
	params:
		#intermed = samplepath+"{sample}_merged.fastq"		
		intermed = samplepath	
	log:
		outpath+"wholegenome_altus_k{k}_unique_counting/logs/allnodes_{sample}_shortreadcounts_k{k}.log"
	shell:	
		"/usr/bin/time -v {config[codepath]}build/src/polyassembly_findkmers count_kmers -s {params.intermed} -k {input} -c {output} -l {wildcards.k} |& tee {log}"
			
rule merge_countfiles:
	input:
		expand(outpath+"wholegenome_altus_k{{k}}_unique_counting/count_files/allnodes_{sample}_shortreadcounts_k{{k}}.txt", sample=config['data']['samples'])
	params:
		leng = len(config['data']['samples'])
	output:
		outpath+"allnodes_merged_shortreadcounts_k{k}.tsv"
	shell:
		"/usr/bin/time -v python3 merge_countfiles_allnodes.py {output} {config[data][samples]} {input} {params.leng}"
		
rule find_and_replace:
	input:
		outpath+"allnodes_merged_shortreadcounts_k{k}.tsv"
	params:
		cutoff = 0.1
	output:
		outpath+"allnodes_merged_shortreadcounts_filtered_k{k}_0.1.tsv"
	shell:
		"/usr/bin/time -v python3 filter_and_replace.py {input} {output} {params.cutoff}"	
	
	
	
