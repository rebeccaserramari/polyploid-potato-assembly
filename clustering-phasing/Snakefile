chromosomes = {"ch01","ch02","ch03","ch04","ch05","ch06","ch07","ch08","ch09","ch10","ch11","ch12"}
haplotypes = {"h1","h2","h3","h4"}
k = {71}

rule subset_samples:
	output:
		'samples.lst'
	run:
		import json
		import random

		conf = open(configfile)
		data = json.load(conf)
		samples = data['data']['samples']  

		subset = random.sample(samples, sample_number)
		with open('samples.lst','w') as outf:	
			outf.write(','.join(subset))			
		conf.close()


rule all:
	input:
		"summed_altusccs_to_altus_filtered_unique_sequences_5kb.depth-coverage-cns.csv"

#cluster the nodes into chromosomal clusters
"""
coverage file has been computed by coverage-analysis snakefile
"""
rule cluster:
	input: 
		path = "spud_altus_hifiasm.r_utg.noseq.components/",
		dosagefile = "summed_altusccs_to_altus_filtered_unique_sequences_5kb.depth-coverage-cns.csv",
		graph = "spud_altus_hifiasm.r_utg.noseq.gfa",
		kmercounts = "allnodes_merged_shortreadcounts_k{k}_filtered_0.1.tsv" 			
	output:
		"clustering.txt"
		#TODO output in script
	shell:
		"/usr/bin/time python3 cluster_allnodes.py {input.path} {input.dosagefile} {input.graph} {input.kmercounts} {output}"

#not necessary to  mapping to ref chromosomes is a manual step, use readgroups instead (as wildcards)?


rule write_nodes_to_haplo:
	input:
		cluster = "readgroup_clusters/clusters_{chrom}_new.tsv"
	output:
		"readgroup_clusters/clusters_{chrom}_new_nodes.csv"		
	shell:
		"/usr/bin/time python3 write_nodes_to_haplotypes.py {input.cluster} {output}"

rule write_haplotype_colors:
	input:
		"readgroup_clusters/clusters_{chrom}_new_nodes.csv"
	shell:
		"/usr/bin/time python3 write_haplo_colors.py {input}"		 	
		
#phase chromosome clusters into haplotypes		
rule cluster_phasing:		
	input:
		gfapath = "spud_altus_hifiasm.r_utg.components/",
		kmercounts = "allnodes_merged_shortreadcounts_k71_bcalm_filtered_0.1_notangle.tsv",
		dosage = "summed_altusccs_to_altus_filtered_unique_sequences_5kb.depth-coverage-cns.csv"
	params:	
		outpath = "readgroup_clusters/"
	output:
		
	shell:
		"/usr/bin/time -v python3 cluster_phasing.py {input.gfapath} {input.kmercounts} {params.outpath} {input.dosage}"

		
rule add_unphased:
	input:
		clusterfile = "readgroup_clusters/clusters_{chrom}_new.tsv",	
		#written during rule cluster_phasing
		nodefile = "readgroup_clusters/allnodes_RG{chrom}.txt"		
	params:
		chromosome = {chrom}			
	output:
		"readgroup_clusters/clusters_{chrom}_new_withunphased.tsv"
	shell:
		"/usr/bin/time -v python3 add_unphased_nodes_tofile.py {params.chromosome} {input.clusterfile} {input.nodefile} {output}"		
		
		
#find graph traversals to assemble haplotigs
rule thread:
	input:
		gfa = "spud_altus_hifiasm.r_utg.gfa",
		colored_nodes = "readgroup_clusters/clusters_{chrom}_colors_{haplo}.csv",
		clusterfile = "readgroup_clusters/clusters_{chrom}_new_withunphased.tsv",
	params:
		write_output = False,
		write_sequence = False	
	log:
		'readgroup_clusters/clusters_{chrom}_{haplo}_new-`date +"%Y-%m-%d_%H-%M"`.log'
	output:
		
	shell:
		"/usr/bin/time -v python3 -u write_threaded_paths.py {input.gfa} {input.colored_nodes} {input.clusterfile} {params.write_output} {params.write_sequence} | tee {log}"


		